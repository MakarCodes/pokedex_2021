{"version":3,"sources":["components/Pokedex/PokemonDetails/PokemonDetails.module.scss","components/Pokedex/PokemonCard/PokemonCard.module.scss","components/Pokedex/Filter/Filter.module.scss","components/Footer/Footer.module.scss","components/Pokedex/Pagination/PaginationPanel/PaginationPanel.module.scss","components/Pokedex/Pokedex.module.scss","components/Pokedex/Pagination/PaginationBtn/PaginationBtn.module.scss","components/Pokedex/PokemonDetails/Skill/Skill.module.scss","components/Navbar/Hamburger/Hamburger.module.scss","components/Navbar/Links/Links.module.scss","components/Navbar/SingleLink/SingleLink.module.scss","components/Layout/Layout.module.scss","components/Navbar/Logo/Logo.module.scss","components/Navbar/Navbar.module.scss","components/UI/Spinner/Spinner.module.scss","components/Pokedex/FilterButton/FilterButton.module.scss","components/Pokedex/Pagination/Dots/Dots.module.scss","components/UI/RouteModal/RouteModal.module.scss","store/pokemons/reducer/pokemonReducer.tsx","components/Footer/Footer.tsx","components/Navbar/Hamburger/Hamburger.tsx","components/Navbar/SingleLink/SingleLink.tsx","components/Navbar/Links/Links.tsx","assets/images/Pokemon-LOGO.png","components/Navbar/Logo/Logo.tsx","components/Navbar/Navbar.tsx","components/Layout/Layout.tsx","components/BestPokemons/BestPokemons.tsx","components/Contact/Contact.tsx","reducers/filterReducer.tsx","store/pokemons/context/pokemonsContextProvider.tsx","store/pokemons/context/actionsFactory.tsx","components/UI/Spinner/Spinner.tsx","constans/constans.ts","components/Pokedex/FilterButton/FilterButton.tsx","components/Pokedex/Filter/Filter.tsx","customHooks/useTypeChanger.tsx","components/Pokedex/Pagination/reducer/reducerTypes.ts","components/Pokedex/Pagination/PaginationBtn/PaginationBtn.tsx","components/Pokedex/Pagination/Dots/Dots.tsx","components/Pokedex/Pagination/PaginateActionBtn/PaginateActionBtn.tsx","components/Pokedex/Pagination/PaginationPanel/PaginationPanel.tsx","components/Pokedex/Pagination/PaginationPanel/generatePagesToRender.tsx","components/Pokedex/Pagination/helpers/helpers.ts","store/description/reducer/descriptionReducer.tsx","components/Pokedex/Pagination/reducer/paginationReducer.tsx","components/Pokedex/Pagination/usePagination/actionsFactory.ts","components/Pokedex/Pagination/usePagination/usePagination.tsx","components/Pokedex/PokemonCard/PokemonCard.tsx","components/Pokedex/Pokemons/Pokemons.tsx","components/Pokedex/Pokedex.tsx","components/Purpose/Purpose.tsx","components/UI/RouteModal/RouteModal.tsx","store/description/context/descriptionContextProvider.tsx","store/description/context/actionsFactory.tsx","store/description/context/getDescription.ts","components/Pokedex/PokemonDetails/Skill/Skill.tsx","components/Pokedex/PokemonDetails/PokemonDetails.tsx","components/Routes/Routes.tsx","customHooks/useQuery.ts","store/pokemons/context/getPokemons.ts","App.tsx","contexts/ViewportSizeContextProvider.tsx","index.tsx"],"names":["module","exports","ActionTypes","Footer","setFooterHeight","targetRef","useRef","useLayoutEffect","current","offsetHeight","className","classes","FooterContainer","ref","FooterWrapper","CopyrightsContainer","LinksContainer","href","Link","Hamburger","isOpen","toggle","HamburgerOpen","onClick","SingleLink","path","value","ListItem","to","Links","List","ListOpen","Logo","src","PokemonLogo","alt","Navbar","setNavbarHeight","useState","setIsOpen","Wrapper","Layout","children","navbarHeight","footerHeight","childrenHeight","setChildrenHeight","useEffect","window","innerHeight","style","minHeight","InnerWrapper","BestPokemons","Contact","initialState","pokemons","isLoading","error","pokemonsReducer","state","action","type","FETCHING_DATA_START","FETCHING_DATA_SUCCESS","payload","FETCHING_DATA_FAIL","initCtx","pokedexState","fetchActions","fetchPokemonsStart","fetchPokemonsSuccess","fetchPokemonsFail","pokedexCtx","createContext","PokemonsContextProvider","useReducer","actions","dispatch","actionsFactory","providerValue","Provider","Spinner","Loader","POKEMON_TYPES","TYPE_COLORS","poison","grass","fire","flying","water","bug","normal","electric","ground","fairy","fighting","psychic","rock","ghost","ice","steel","dragon","dark","FilterButton","handleTypeChange","bgColor","e","FilterBtn","backgroundColor","Filter","types","resetTypes","isVisible","setIsVisible","useToggle","filterButtonsToRender","useMemo","map","pokemonType","idx","btnType","currentTypes","indexOf","Container","FilterTitle","Note","ActionBtnContainer","ToggleBtn","icon","faFilter","size","ResetBtn","ButtonsWrapper","useTypeChanger","setTypes","length","newTypes","splice","pokemonsToDisplay","isFilterActive","filterReducer","SET_POKEMONS_TO_DISPLAY","setPokemonsToDisplay","FILTER_POKEMONS","filter","pokemon","every","filterPokemonsByType","filterPokemons","PaginationBtn","number","actualPageIdx","goToPage","styles","PaginationBtnActive","Dots","PaginateActionBtn","actionName","actionFn","PaginationPanel","paginationState","paginationActions","pagesNumbers","lastPageIdx","goToFirstPage","goToPreviousPage","goToNextPage","goToLastPage","pagesToRender","Array","_","LAST_NUMBER_AT_START","generatePagsToRender","PaginationWrapper","ButtonsContainer","data-testid","Chevron","ChevronLeft","display","ChevronRight","entriesOnSelectedPage","elementsOnPage","isBusy","paginationReducer","UPDATE_DATA_ENTIRES_ON_PAGE","updateDataEntriesOnPage","UPDATE_ACTUAL_PAGE_INDEX","updateActualPageIndex","SET_TO_LOADING","setToLoading","SET_TO_LOADING_DONE","setToLoadingDone","dataEntries","Math","ceil","lastAvailableIdx","i","push","generatePagesNumbers","firstElementIdxOnActualPage","lastElementIdxOnActualPage","slice","getEntriesOnSelectedPage","updateType","pageNumber","actualPageIdxPrev","updateDataEntries","setToIsLoading","usePagination","timer","setTimeout","clearTimeout","paginationStateValues","handleMouseMoveOverImage","event","pokemonSprite","target","PokemonCard","location","useLocation","id","name","height","weight","sprites","cardBg","bgColorTypes","forEach","index","background","generateBgDependingOnType","pokemonTypes","charAt","toUpperCase","join","drawTypes","pokemonId","drawId","pathname","search","textDecoration","onMouseOver","back_default","onMouseOut","front_default","PokemonName","PokemonId","Info","DetailInfo","faWeightHanging","WeightHeight","faSortAmountUp","Details","Type","Pokemons","Pokedex","useContext","SpinnerContainer","LoadingText","Purpose","RouteModal","history","useHistory","document","body","overflow","stopPropagation","goBack","pokemonDetails","stats","statName","statValue","description","descriptionReducer","FETCHING_DESCRIPTION_START","FETCHING_DESCRIPTION_SUCCESS","FETCHING_DESCRIPTION_FAIL","fetchDescriptionStart","fetchDescriptionSuccess","fetchDescriptionFail","descriptionCtx","DescriptionContextProvider","getDescription","url","a","urlPath","fetch","response","json","data","flavor_text_entries","find","text","language","convertedDescription","flavor_text","replace","Skill","StatName","StatValue","OutsideSkillBar","InsideSkillBar","width","PokemonDetails","id_url","spanTypes","spanStyle","color","border","SpanType","generatePokemonSpanTypes","id_format","skillsList","stat","generateSkills","parseInt","findPokemonById","fetchDescription","console","log","DetailsCard","closeIcon","closeModal","faTimes","PokemonDescription","PokemonInfoContainer","PokemonWeight","SkillsContainer","Routes","key","URLSearchParams","get","useQuery","component","exact","getPokemons","Promise","all","results","result","spritesImages","pokemonStats","singleStat","base_stat","App","fetchPokemons","viewportSizeContext","innerWidth","ViewportSizeContextProvider","windowSize","setWindowSize","handleWindowResize","addEventListener","removeEventListener","ReactDOM","render","StrictMode","basename","process","getElementById"],"mappings":"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","file":"static/js/main.29016669.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"PokemonDetails_Wrapper__29HVp\",\"DetailsCard\":\"PokemonDetails_DetailsCard__3SmDl\",\"PokemonName\":\"PokemonDetails_PokemonName__3bWxG\",\"PokemonId\":\"PokemonDetails_PokemonId__3Vrpu\",\"PokemonDescription\":\"PokemonDetails_PokemonDescription__UjV2-\",\"PokemonInfoContainer\":\"PokemonDetails_PokemonInfoContainer__3-lrL\",\"PokemonWeight\":\"PokemonDetails_PokemonWeight__1-NI2\",\"SkillsContainer\":\"PokemonDetails_SkillsContainer__2cVVt\",\"closeIcon\":\"PokemonDetails_closeIcon__1dt9-\",\"SpanType\":\"PokemonDetails_SpanType__3hUuI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PokemonCard\":\"PokemonCard_PokemonCard__yxL4p\",\"PokemonName\":\"PokemonCard_PokemonName__KI4_R\",\"PokemonId\":\"PokemonCard_PokemonId__V0-rU\",\"Info\":\"PokemonCard_Info__u7EkI\",\"WeightHeight\":\"PokemonCard_WeightHeight__1khBo\",\"Type\":\"PokemonCard_Type__1Fdd1\",\"Details\":\"PokemonCard_Details__2zD1r\",\"DetailInfo\":\"PokemonCard_DetailInfo__2xzZ2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Filter_Container__2pF71\",\"Wrapper\":\"Filter_Wrapper__3HK2v\",\"FilterTitle\":\"Filter_FilterTitle__1xZT6\",\"Note\":\"Filter_Note__2P3E4\",\"ToggleBtn\":\"Filter_ToggleBtn__1jWEP\",\"ActionBtnContainer\":\"Filter_ActionBtnContainer__3gyf0\",\"ResetBtn\":\"Filter_ResetBtn__FAIPQ\",\"ButtonsWrapper\":\"Filter_ButtonsWrapper__1cN2v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FooterContainer\":\"Footer_FooterContainer__2cFYN\",\"FooterWrapper\":\"Footer_FooterWrapper__r5VtV\",\"CopyrightsContainer\":\"Footer_CopyrightsContainer__2K5qu\",\"LinksContainer\":\"Footer_LinksContainer__daSYA\",\"Link\":\"Footer_Link__DQJgz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PaginationWrapper\":\"PaginationPanel_PaginationWrapper__1hP0K\",\"ButtonsContainer\":\"PaginationPanel_ButtonsContainer__2l7OM\",\"Chevron\":\"PaginationPanel_Chevron__p_wKd\",\"ChevronLeft\":\"PaginationPanel_ChevronLeft__2RePw\",\"ChevronRight\":\"PaginationPanel_ChevronRight__2GTTf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Pokedex_Wrapper__25e8r\",\"Container\":\"Pokedex_Container__303QH\",\"SpinnerContainer\":\"Pokedex_SpinnerContainer__179IK\",\"LoadingText\":\"Pokedex_LoadingText__2gpaX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PaginationBtn\":\"PaginationBtn_PaginationBtn__WXccM\",\"PaginationBtnActive\":\"PaginationBtn_PaginationBtnActive__3wSrk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatName\":\"Skill_StatName__3-1Fc\",\"StatValue\":\"Skill_StatValue__15cy_\",\"OutsideSkillBar\":\"Skill_OutsideSkillBar__1tz9s\",\"InsideSkillBar\":\"Skill_InsideSkillBar__1N6Zi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Hamburger\":\"Hamburger_Hamburger__3NeMl\",\"HamburgerOpen\":\"Hamburger_HamburgerOpen__mrovx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"Links_List__1gmy_\",\"ListOpen\":\"Links_ListOpen__3d4pr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ListItem\":\"SingleLink_ListItem__1a9Qg\",\"Link\":\"SingleLink_Link__or-Wg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Layout_Wrapper__2IrEq\",\"InnerWrapper\":\"Layout_InnerWrapper__1m1DL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__ec4_j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Navbar_Wrapper__3SrXv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__2hWH0\",\"load6\":\"Spinner_load6__3TF0d\",\"round\":\"Spinner_round__1q8Ju\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FilterBtn\":\"FilterButton_FilterBtn__1_k8N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dots\":\"Dots_Dots__1wekB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"RouteModal_Wrapper__cXFsS\",\"Close\":\"RouteModal_Close__3HAhV\",\"CloseIcon\":\"RouteModal_CloseIcon__w-4jU\"};","export interface IState {\r\n  pokemons: IPokemon[];\r\n  isLoading: boolean;\r\n  error: boolean;\r\n}\r\n\r\nexport const initialState = {\r\n  pokemons: [],\r\n  isLoading: false,\r\n  error: false,\r\n};\r\n\r\nexport enum ActionTypes {\r\n  FETCHING_DATA_START = 'FETCHING_DATA_START',\r\n  FETCHING_DATA_SUCCESS = 'FETCHING_DATA_SUCCESS',\r\n  FETCHING_DATA_FAIL = 'FETCHING_DATA_FAIL',\r\n}\r\n\r\nexport type Actions =\r\n  | {\r\n      type: 'FETCHING_DATA_START';\r\n    }\r\n  | {\r\n      type: 'FETCHING_DATA_SUCCESS';\r\n      payload: { pokemons: IPokemon[] };\r\n    }\r\n  | {\r\n      type: 'FETCHING_DATA_FAIL';\r\n    };\r\n\r\nconst pokemonsReducer = (state: IState, action: Actions) => {\r\n  switch (action.type) {\r\n    case ActionTypes.FETCHING_DATA_START:\r\n      return { ...state, isLoading: true };\r\n    case ActionTypes.FETCHING_DATA_SUCCESS:\r\n      return { ...state, isLoading: false, pokemons: action.payload.pokemons };\r\n    case ActionTypes.FETCHING_DATA_FAIL:\r\n      return { ...state, isLoading: false, error: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default pokemonsReducer;\r\n","import { useLayoutEffect, useRef } from 'react';\r\n\r\nimport classes from './Footer.module.scss';\r\n\r\ninterface IProps {\r\n  setFooterHeight: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\nconst Footer: React.FC<IProps> = ({ setFooterHeight }) => {\r\n  const targetRef: React.MutableRefObject<null | HTMLDivElement> = useRef(null);\r\n  useLayoutEffect(() => {\r\n    if (targetRef.current) {\r\n      setFooterHeight(targetRef.current.offsetHeight);\r\n    }\r\n  }, [setFooterHeight]);\r\n  return (\r\n    <div className={classes.FooterContainer} ref={targetRef}>\r\n      <div className={classes.FooterWrapper}>\r\n        <div className={classes.CopyrightsContainer}>Copyright © 2021</div>\r\n        <div className={classes.LinksContainer}>\r\n          <a href='/' className={classes.Link}>\r\n            Polityka prywatności\r\n          </a>\r\n          <a href='/' className={classes.Link}>\r\n            Mapa strony\r\n          </a>\r\n          <a href='/' className={classes.Link}>\r\n            Cookies\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import classes from './Hamburger.module.scss';\r\n\r\ninterface IProps {\r\n  isOpen: boolean;\r\n  toggle: () => void;\r\n}\r\n\r\nconst Hamburger: React.FC<IProps> = ({ isOpen, toggle }) => {\r\n  return (\r\n    <>\r\n      <button\r\n        className={\r\n          isOpen\r\n            ? `${classes.Hamburger} ${classes.HamburgerOpen}`\r\n            : classes.Hamburger\r\n        }\r\n        onClick={() => toggle()}\r\n      >\r\n        <div />\r\n        <div />\r\n        <div />\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Hamburger;\r\n","import { Link } from 'react-router-dom';\r\nimport classes from './SingleLink.module.scss';\r\n\r\ninterface IProps {\r\n  path: string;\r\n  value: string;\r\n}\r\n\r\nconst SingleLink: React.FC<IProps> = ({ path, value }) => {\r\n  return (\r\n    <li className={classes.ListItem}>\r\n      <Link to={path} className={classes.Link}>\r\n        {value}\r\n      </Link>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default SingleLink;\r\n","import SingleLink from '../SingleLink/SingleLink';\r\nimport classes from './Links.module.scss';\r\n\r\ninterface IProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nconst Links: React.FC<IProps> = ({ isOpen }) => {\r\n  return (\r\n    <div\r\n      className={isOpen ? `${classes.List} ${classes.ListOpen}` : classes.List}\r\n    >\r\n      <SingleLink path='/' value='Pokedex' />\r\n      <SingleLink path='/mybest' value='MyBest' />\r\n      <SingleLink path='/projectPurpose' value='ProjectPurpose' />\r\n      <SingleLink path='/contact' value='Contact' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Links;\r\n","export default __webpack_public_path__ + \"static/media/Pokemon-LOGO.5974b032.png\";","import PokemonLogo from '../../../assets/images/Pokemon-LOGO.png';\r\nimport classes from './Logo.module.scss';\r\n\r\nconst Logo: React.FC = () => {\r\n  return (\r\n    <div className={classes.Logo}>\r\n      <img src={PokemonLogo} alt='Page Logo Title' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import Hamburger from './Hamburger/Hamburger';\r\nimport { useLayoutEffect, useState, useRef } from 'react';\r\n\r\nimport Links from './Links/Links';\r\nimport Logo from './Logo/Logo';\r\n\r\nimport classes from './Navbar.module.scss';\r\n\r\ninterface IProps {\r\n  setNavbarHeight: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\nconst Navbar: React.FC<IProps> = ({ setNavbarHeight }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  const targetRef: React.MutableRefObject<null | HTMLDivElement> = useRef(null);\r\n  useLayoutEffect(() => {\r\n    if (targetRef.current) {\r\n      setNavbarHeight(targetRef.current.offsetHeight);\r\n    }\r\n  }, [setNavbarHeight]);\r\n\r\n  return (\r\n    <div className={classes.Wrapper} ref={targetRef}>\r\n      <Logo />\r\n      <Links isOpen={isOpen} />\r\n      <Hamburger isOpen={isOpen} toggle={toggle} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport Footer from '../Footer/Footer';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport classes from './Layout.module.scss';\r\n\r\nconst Layout: React.FC<React.ReactNode> = ({ children }) => {\r\n  const [navbarHeight, setNavbarHeight] = useState(0);\r\n  const [footerHeight, setFooterHeight] = useState(0);\r\n  const [childrenHeight, setChildrenHeight] = useState(0);\r\n  useEffect(() => {\r\n    setChildrenHeight(window.innerHeight - navbarHeight - footerHeight);\r\n  }, [navbarHeight, footerHeight]);\r\n  return (\r\n    <div className={classes.Wrapper}>\r\n      <Navbar setNavbarHeight={setNavbarHeight} />\r\n      <div\r\n        style={{ minHeight: `${childrenHeight}px` }}\r\n        // style={{ minHeight: `${window.innerHeight - 200}px` }}\r\n        className={classes.InnerWrapper}\r\n      >\r\n        {children}\r\n      </div>\r\n      <Footer setFooterHeight={setFooterHeight} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\n\r\nconst BestPokemons = () => {\r\n  return <div>BEST POKEMONS - SECTION - WORK IN PROGRESS...</div>;\r\n};\r\n\r\nexport default BestPokemons;\r\n","import React from 'react';\r\n\r\nconst Contact = () => {\r\n  return <div>CONTACT SECTION - WORK IN PROGRESS...</div>;\r\n};\r\n\r\nexport default Contact;\r\n","interface IState {\r\n  pokemonsToDisplay: IPokemon[];\r\n  isFilterActive: boolean;\r\n}\r\n\r\nexport const initialState: IState = {\r\n  pokemonsToDisplay: [],\r\n  isFilterActive: false,\r\n};\r\n\r\nexport enum ActionTypes {\r\n  SET_POKEMONS_TO_DISPLAY = 'SET_POKEMONS_TO_DISPLAY',\r\n  FILTER_POKEMONS = 'FILTER_POKEMONS',\r\n}\r\n\r\nexport type Actions =\r\n  | {\r\n      type: 'FILTER_POKEMONS';\r\n      payload: {\r\n        pokemons: IPokemon[];\r\n        types: AvailavlePokemonTypes[];\r\n      };\r\n    }\r\n  | {\r\n      type: 'SET_POKEMONS_TO_DISPLAY';\r\n      payload: {\r\n        pokemons: IPokemon[];\r\n      };\r\n    };\r\n\r\nconst filterPokemonsByType = (\r\n  pokemons: IPokemon[],\r\n  types: AvailavlePokemonTypes[]\r\n) => {\r\n  if (types.length === 1) {\r\n    return pokemons.filter(pokemon => pokemon.types.indexOf(types[0]) >= 0);\r\n  }\r\n  if (types.length === 2) {\r\n    return pokemons.filter(pokemon =>\r\n      pokemon.types.every(type => types.indexOf(type) >= 0)\r\n    );\r\n  }\r\n  return pokemons;\r\n};\r\n\r\nconst filterPokemons = (state: IState, action: Actions) => {\r\n  if (action.type === 'FILTER_POKEMONS') {\r\n    const { pokemons, types } = action.payload;\r\n    const pokemonsToDisplay = filterPokemonsByType(pokemons, types);\r\n    if (types.length) {\r\n      return {\r\n        pokemonsToDisplay,\r\n        isFilterActive: true,\r\n      };\r\n    }\r\n    return {\r\n      pokemonsToDisplay,\r\n      isFilterActive: false,\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst setPokemonsToDisplay = (state: IState, action: Actions) => {\r\n  const { pokemons } = action.payload;\r\n  return {\r\n    pokemonsToDisplay: pokemons,\r\n    isFilterActive: false,\r\n  };\r\n};\r\n\r\nconst filterReducer = (state: IState, action: Actions) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_POKEMONS_TO_DISPLAY:\r\n      return setPokemonsToDisplay(state, action);\r\n    case ActionTypes.FILTER_POKEMONS:\r\n      return filterPokemons(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default filterReducer;\r\n","import { createContext, useReducer } from 'react';\r\nimport pokemonsReducer, {\r\n  IState,\r\n  initialState,\r\n} from '../reducer/pokemonReducer';\r\nimport { actionsFactory } from './actionsFactory';\r\n\r\nexport interface IContext {\r\n  pokedexState: IState;\r\n  fetchActions: {\r\n    fetchPokemonsStart: () => void;\r\n    fetchPokemonsSuccess: (pokemons: IPokemon[]) => void;\r\n    fetchPokemonsFail: () => void;\r\n  };\r\n}\r\n\r\nconst initCtx: IContext = {\r\n  pokedexState: initialState,\r\n  fetchActions: {\r\n    fetchPokemonsStart: () => {},\r\n    fetchPokemonsSuccess: () => {},\r\n    fetchPokemonsFail: () => {},\r\n  },\r\n};\r\n\r\nexport const pokedexCtx = createContext(initCtx);\r\n\r\nconst PokemonsContextProvider: React.FC<React.ReactNode> = ({ children }) => {\r\n  const [pokedexState, dispatch] = useReducer(pokemonsReducer, initialState);\r\n  const actions = actionsFactory(dispatch);\r\n  const {\r\n    fetchPokemonsStart,\r\n    fetchPokemonsSuccess,\r\n    fetchPokemonsFail,\r\n  } = actions;\r\n  const fetchActions = {\r\n    fetchPokemonsStart,\r\n    fetchPokemonsSuccess,\r\n    fetchPokemonsFail,\r\n  };\r\n  const providerValue = {\r\n    pokedexState,\r\n    fetchActions,\r\n  };\r\n  return (\r\n    <pokedexCtx.Provider value={providerValue}>{children}</pokedexCtx.Provider>\r\n  );\r\n};\r\n\r\nexport default PokemonsContextProvider;\r\n","import { Actions, ActionTypes } from '../reducer/pokemonReducer';\r\n\r\nexport const actionsFactory = (dispatch: React.Dispatch<Actions>) => ({\r\n  fetchPokemonsStart: () => dispatch({ type: ActionTypes.FETCHING_DATA_START }),\r\n  fetchPokemonsSuccess: (pokemons: IPokemon[]) =>\r\n    dispatch({\r\n      type: ActionTypes.FETCHING_DATA_SUCCESS,\r\n      payload: { pokemons },\r\n    }),\r\n  fetchPokemonsFail: () => dispatch({ type: ActionTypes.FETCHING_DATA_FAIL }),\r\n});\r\n","import classes from './Spinner.module.scss';\r\n\r\nconst Spinner = () => {\r\n  return <div className={classes.Loader}>Loading...</div>;\r\n};\r\n\r\nexport default Spinner;\r\n","export const URL_ALL_POKEMONS =\r\n  'https://pokeapi.co/api/v2/pokemon?offset=0&limit=500';\r\nexport const URL_POKEMON_DESCRIPTION =\r\n  'https://pokeapi.co/api/v2/pokemon-species';\r\n\r\nexport const POKEMON_TYPES: AvailavlePokemonTypes[] = [\r\n  'normal',\r\n  'fighting',\r\n  'flying',\r\n  'poison',\r\n  'ground',\r\n  'rock',\r\n  'bug',\r\n  'ghost',\r\n  'steel',\r\n  'fire',\r\n  'water',\r\n  'grass',\r\n  'electric',\r\n  'psychic',\r\n  'ice',\r\n  'dragon',\r\n  'fairy',\r\n  'dark',\r\n];\r\n\r\ninterface ITypes {\r\n  [key: string]: string;\r\n}\r\n\r\nexport const TYPE_COLORS: ITypes = {\r\n  poison: '#C68CC6',\r\n  grass: '#AEDE96',\r\n  fire: '#F6B282',\r\n  flying: '#CABCF6',\r\n  water: '#A4BCF6',\r\n  bug: '#CAD479',\r\n  normal: '#CACAAE',\r\n  electric: '#FAE282',\r\n  ground: '#ECD9A4',\r\n  fairy: '#F4C1CD',\r\n  fighting: '#D9827E',\r\n  psychic: '#FA9AB7',\r\n  rock: '#D4C687',\r\n  ghost: '#A99AC1',\r\n  ice: '#C1E7E7',\r\n  steel: '#D4D4E2',\r\n  dragon: '#A886F9',\r\n  dark: '#A89990',\r\n};\r\n","import React from 'react';\r\nimport classes from './FilterButton.module.scss';\r\n\r\ninterface IProps {\r\n  type: AvailavlePokemonTypes;\r\n  bgColor: string;\r\n  handleTypeChange: (type: AvailavlePokemonTypes) => void;\r\n}\r\nconst FilterButton: React.FC<IProps> = ({\r\n  type,\r\n  handleTypeChange,\r\n  bgColor,\r\n}) => (\r\n  <button\r\n    onClick={e => handleTypeChange(type)}\r\n    className={classes.FilterBtn}\r\n    style={{ backgroundColor: `${bgColor}` }}\r\n  >\r\n    {type}\r\n  </button>\r\n);\r\n\r\nexport default FilterButton;\r\n","import { useState, useMemo } from 'react';\r\nimport classes from './Filter.module.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFilter } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { POKEMON_TYPES, TYPE_COLORS } from '../../../constans/constans';\r\nimport FilterButton from '../FilterButton/FilterButton';\r\n\r\nconst useToggle = () => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  const toggle = () => setIsVisible(!isVisible);\r\n\r\n  return { isVisible, toggle };\r\n};\r\n\r\nconst setButtonBGColor = (\r\n  btnType: AvailavlePokemonTypes,\r\n  currentTypes: AvailavlePokemonTypes[]\r\n) => {\r\n  const idx = currentTypes.indexOf(btnType);\r\n  if (idx !== -1) {\r\n    return TYPE_COLORS[btnType];\r\n  }\r\n  return '';\r\n};\r\n\r\ninterface IProps {\r\n  types: AvailavlePokemonTypes[];\r\n  handleTypeChange: (type: AvailavlePokemonTypes) => void;\r\n  resetTypes: () => void;\r\n}\r\n\r\nconst Filter: React.FC<IProps> = ({ types, handleTypeChange, resetTypes }) => {\r\n  const { isVisible, toggle } = useToggle();\r\n\r\n  const filterButtonsToRender = useMemo(\r\n    () =>\r\n      POKEMON_TYPES.map((pokemonType, idx) => (\r\n        <FilterButton\r\n          type={pokemonType}\r\n          handleTypeChange={handleTypeChange}\r\n          key={pokemonType + idx}\r\n          bgColor={setButtonBGColor(pokemonType, types)}\r\n        />\r\n      )),\r\n    [handleTypeChange, types]\r\n  );\r\n  return (\r\n    <div className={classes.Container}>\r\n      <div className={classes.Wrapper}>\r\n        <h2 className={classes.FilterTitle}>\r\n          Discover your favorite Pokemon species by selecting specific types!\r\n        </h2>\r\n        <p className={classes.Note}>\r\n          Please note, that maximum of two types can be chosen simultaneously.\r\n        </p>\r\n        <div className={classes.ActionBtnContainer}>\r\n          <button className={classes.ToggleBtn} onClick={() => toggle()}>\r\n            <i>\r\n              <FontAwesomeIcon icon={faFilter} size='2x' />\r\n            </i>\r\n          </button>\r\n          {isVisible && (\r\n            <button onClick={() => resetTypes()} className={classes.ResetBtn}>\r\n              clear filters\r\n            </button>\r\n          )}\r\n        </div>\r\n        {isVisible && (\r\n          <div className={classes.ButtonsWrapper}>{filterButtonsToRender}</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useState } from 'react';\r\n\r\nconst useTypeChanger = () => {\r\n  const [types, setTypes] = useState<AvailavlePokemonTypes[]>([]);\r\n\r\n  const resetTypes = () => setTypes([]);\r\n\r\n  const handleTypeChange = (type: AvailavlePokemonTypes) => {\r\n    switch (types.length) {\r\n      case 0: {\r\n        setTypes([type]);\r\n        break;\r\n      }\r\n      case 1: {\r\n        if (types.indexOf(type) >= 0) {\r\n          setTypes([]);\r\n        } else {\r\n          setTypes([...types, type]);\r\n        }\r\n        break;\r\n      }\r\n      case 2: {\r\n        const idx = types.indexOf(type);\r\n        if (idx >= 0) {\r\n          const newTypes = [...types];\r\n          newTypes.splice(idx, 1);\r\n          setTypes(newTypes);\r\n        } else {\r\n          const newTypes = [...types];\r\n          newTypes.splice(1, 1, type);\r\n          setTypes(newTypes);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  return { types, handleTypeChange, resetTypes };\r\n};\r\n\r\nexport default useTypeChanger;\r\n","export interface IPaginationState<T> {\r\n  entriesOnSelectedPage: T[];\r\n  elementsOnPage: number;\r\n  actualPageIdx: number;\r\n  lastPageIdx: number;\r\n  isBusy: boolean;\r\n  pagesNumbers: number[];\r\n}\r\n\r\nexport enum ActionTypes {\r\n  UPDATE_DATA_ENTIRES_ON_PAGE = 'UPDATE_DATA_ENTIRES_ON_PAGE',\r\n  UPDATE_ACTUAL_PAGE_INDEX = 'UPDATE_ACTUAL_PAGE_INDEX',\r\n  SET_TO_LOADING = 'SET_TO_LOADING',\r\n  SET_TO_LOADING_DONE = 'SET_TO_LOADING_DONE',\r\n}\r\n\r\nexport type availableIndexUpdates =\r\n  | 'next'\r\n  | 'prev'\r\n  | 'first'\r\n  | 'last'\r\n  | 'number';\r\n\r\nexport type Actions<T> =\r\n  | {\r\n      type: 'UPDATE_DATA_ENTIRES_ON_PAGE';\r\n      payload: {\r\n        dataEntries: T[];\r\n        elementsOnPage: number;\r\n      };\r\n    }\r\n  | {\r\n      type: 'UPDATE_ACTUAL_PAGE_INDEX';\r\n      payload: {\r\n        updateType: availableIndexUpdates;\r\n        pageNumber?: number;\r\n      };\r\n    }\r\n  | { type: 'SET_TO_LOADING' }\r\n  | { type: 'SET_TO_LOADING_DONE' };\r\n\r\n// export interface GenericPayload {\r\n//   [key: string]: any;\r\n// }\r\n// export interface GenericAction {\r\n//   type: string;\r\n//   payload?: GenericPayload;\r\n// }\r\n","import React from 'react';\r\nimport styles from './PaginationBtn.module.scss';\r\n\r\ninterface IProps {\r\n  number: number;\r\n  actualPageIdx: number;\r\n  goToPage: (pageNumber: number) => void;\r\n}\r\n\r\nconst PaginationBtn: React.FC<IProps> = ({\r\n  number,\r\n  actualPageIdx,\r\n  goToPage,\r\n}) => {\r\n  return (\r\n    <button\r\n      key={number}\r\n      onClick={() => goToPage(number)}\r\n      className={`${styles.PaginationBtn} ${\r\n        actualPageIdx === number ? styles.PaginationBtnActive : ''\r\n      }`}\r\n    >\r\n      {number}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PaginationBtn;\r\n","import styles from './Dots.module.scss';\r\n\r\nconst Dots = () => {\r\n  return <div className={styles.Dots}>...</div>;\r\n};\r\n\r\nexport default Dots;\r\n","import styles from '../PaginationBtn/PaginationBtn.module.scss';\r\n\r\ninterface IProps {\r\n  actionName?: string;\r\n  children?: React.ReactNode;\r\n  actionFn: () => void;\r\n}\r\n\r\nconst PaginateActionBtn: React.FC<IProps> = ({\r\n  actionName,\r\n  children,\r\n  actionFn,\r\n}) => (\r\n  <button onClick={() => actionFn()} className={styles.PaginationBtn}>\r\n    {actionName}\r\n    {children}\r\n  </button>\r\n);\r\n\r\nexport default PaginateActionBtn;\r\n","import React, { useMemo } from 'react';\r\nimport styles from './PaginationPanel.module.scss';\r\nimport { IPaginationActions } from '../paginationTypes';\r\nimport { generatePagsToRender } from './generatePagesToRender';\r\nimport PaginateActionBtn from '../PaginateActionBtn/PaginateActionBtn';\r\ninterface IProps {\r\n  paginationState: {\r\n    lastPageIdx: number;\r\n    actualPageIdx: number;\r\n    pagesNumbers: number[];\r\n  };\r\n  paginationActions: IPaginationActions;\r\n}\r\n\r\nconst PaginationPanel: React.FC<IProps> = ({\r\n  paginationState,\r\n  paginationActions,\r\n}) => {\r\n  const { actualPageIdx, pagesNumbers, lastPageIdx } = paginationState;\r\n  const {\r\n    goToPage,\r\n    goToFirstPage,\r\n    goToPreviousPage,\r\n    goToNextPage,\r\n    goToLastPage,\r\n  } = paginationActions;\r\n\r\n  const pagesToRender = useMemo(\r\n    () =>\r\n      generatePagsToRender(pagesNumbers, actualPageIdx, lastPageIdx, goToPage),\r\n    [pagesNumbers, actualPageIdx, lastPageIdx, goToPage]\r\n  );\r\n  return (\r\n    <div className={styles.PaginationWrapper}>\r\n      <div className={styles.ButtonsContainer}>\r\n        <PaginateActionBtn actionName='FIRST PAGE' actionFn={goToFirstPage} />\r\n        <PaginateActionBtn\r\n          actionFn={goToPreviousPage}\r\n          data-testid='goToPrevPage'\r\n        >\r\n          <span className={`${styles.Chevron} ${styles.ChevronLeft}`}></span>\r\n        </PaginateActionBtn>\r\n        <div data-testid='goToPageButtons' style={{ display: 'flex' }}>\r\n          {pagesToRender}\r\n        </div>\r\n        <PaginateActionBtn actionFn={goToNextPage} data-testid='goToNextPage'>\r\n          <span className={`${styles.Chevron} ${styles.ChevronRight}`}></span>\r\n        </PaginateActionBtn>\r\n        <PaginateActionBtn actionName='LAST PAGE' actionFn={goToLastPage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationPanel;\r\n","import React from 'react';\r\nimport PaginationBtn from '../PaginationBtn/PaginationBtn';\r\nimport Dots from '../Dots/Dots';\r\n\r\nconst LAST_NUMBER_AT_START = 5;\r\nconst MAX_NUMBER_WITHOUT_SHRINK = 10;\r\nconst VALUE_END = LAST_NUMBER_AT_START - 1;\r\n\r\nexport const generatePagsToRender = (\r\n  pagesNumbers: number[],\r\n  actualPageIdx: number,\r\n  lastPageIdx: number,\r\n  goToPage: (pageNumber: number) => void\r\n) => {\r\n  if (pagesNumbers.length <= MAX_NUMBER_WITHOUT_SHRINK) {\r\n    return pagesNumbers.map(number => (\r\n      <PaginationBtn\r\n        number={number}\r\n        actualPageIdx={actualPageIdx}\r\n        goToPage={goToPage}\r\n        key={number}\r\n      />\r\n    ));\r\n  }\r\n  if (\r\n    pagesNumbers.length > MAX_NUMBER_WITHOUT_SHRINK &&\r\n    actualPageIdx < LAST_NUMBER_AT_START\r\n  ) {\r\n    return (\r\n      <>\r\n        {[...Array(LAST_NUMBER_AT_START)].map((_, idx) => {\r\n          const number = idx + 1;\r\n          return (\r\n            <PaginationBtn\r\n              number={number}\r\n              actualPageIdx={actualPageIdx}\r\n              goToPage={goToPage}\r\n              key={idx}\r\n            />\r\n          );\r\n        })}\r\n        <Dots />\r\n        <PaginationBtn\r\n          number={lastPageIdx}\r\n          actualPageIdx={actualPageIdx}\r\n          goToPage={goToPage}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  if (\r\n    pagesNumbers.length > MAX_NUMBER_WITHOUT_SHRINK &&\r\n    actualPageIdx > lastPageIdx - VALUE_END\r\n  ) {\r\n    return (\r\n      <>\r\n        <PaginationBtn\r\n          number={1}\r\n          actualPageIdx={actualPageIdx}\r\n          goToPage={goToPage}\r\n        />\r\n        <Dots />\r\n        {[...Array(5)].map((_, idx) => {\r\n          const number = lastPageIdx - VALUE_END + idx;\r\n          return (\r\n            <PaginationBtn\r\n              number={number}\r\n              actualPageIdx={actualPageIdx}\r\n              goToPage={goToPage}\r\n              key={idx}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n  if (\r\n    (pagesNumbers.length > MAX_NUMBER_WITHOUT_SHRINK &&\r\n      actualPageIdx <= lastPageIdx - VALUE_END) ||\r\n    actualPageIdx >= LAST_NUMBER_AT_START\r\n  ) {\r\n    return (\r\n      <>\r\n        <PaginationBtn\r\n          number={1}\r\n          actualPageIdx={actualPageIdx}\r\n          goToPage={goToPage}\r\n        />\r\n        <Dots />\r\n        <PaginationBtn\r\n          number={actualPageIdx - 1}\r\n          actualPageIdx={actualPageIdx}\r\n          goToPage={goToPage}\r\n        />\r\n\r\n        <PaginationBtn\r\n          number={actualPageIdx}\r\n          actualPageIdx={actualPageIdx}\r\n          goToPage={goToPage}\r\n        />\r\n        <PaginationBtn\r\n          number={actualPageIdx + 1}\r\n          actualPageIdx={actualPageIdx}\r\n          goToPage={goToPage}\r\n        />\r\n        <Dots />\r\n        <PaginationBtn\r\n          number={lastPageIdx}\r\n          actualPageIdx={actualPageIdx}\r\n          goToPage={goToPage}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n","interface IObject {\r\n  [key: string]: any;\r\n}\r\n\r\nexport const updateObject = <T>(oldObject: T, updatedProperties: IObject) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties,\r\n  };\r\n};\r\n\r\nexport const generatePagesNumbers = (lastAvailableIdx: number) => {\r\n  const pagesNumbers: number[] = [];\r\n  for (let i = 1; i <= lastAvailableIdx; i++) {\r\n    pagesNumbers.push(i);\r\n  }\r\n  return pagesNumbers;\r\n};\r\n\r\nexport const getEntriesOnSelectedPage = <T>(\r\n  actualPageIdx: number,\r\n  elementsOnPage: number,\r\n  lastPageIdx: number,\r\n  dataEntries: T[]\r\n) => {\r\n  const firstElementIdxOnActualPage: number =\r\n    (actualPageIdx - 1) * elementsOnPage;\r\n  const lastElementIdxOnActualPage: number =\r\n    actualPageIdx === lastPageIdx\r\n      ? dataEntries.length\r\n      : firstElementIdxOnActualPage + elementsOnPage;\r\n  return dataEntries.slice(\r\n    firstElementIdxOnActualPage,\r\n    lastElementIdxOnActualPage\r\n  );\r\n};\r\n","interface IPokemonDetails extends IPokemon {\r\n  description: string;\r\n}\r\n\r\nexport interface IState {\r\n  pokemonDetails: IPokemonDetails;\r\n  isLoading: boolean;\r\n  error: boolean;\r\n}\r\n\r\nexport const initialState = {\r\n  pokemonDetails: {\r\n    id: 0,\r\n    name: '',\r\n    height: 0,\r\n    weight: 0,\r\n    types: [],\r\n    sprites: {\r\n      front_default: '',\r\n      back_default: '',\r\n    },\r\n    stats: [{ statName: '', statValue: 0 }],\r\n    description: '',\r\n  },\r\n  isLoading: false,\r\n  error: false,\r\n};\r\n\r\nexport enum ActionTypes {\r\n  FETCHING_DESCRIPTION_START = 'FETCHING_DESCRIPTION_START',\r\n  FETCHING_DESCRIPTION_SUCCESS = 'FETCHING_DESCRIPTION_SUCCESS',\r\n  FETCHING_DESCRIPTION_FAIL = 'FETCHING_DESCRIPTION_FAIL',\r\n}\r\n\r\nexport type Actions =\r\n  | {\r\n      type: 'FETCHING_DESCRIPTION_START';\r\n    }\r\n  | {\r\n      type: 'FETCHING_DESCRIPTION_SUCCESS';\r\n      payload: { description: string; pokemon: IPokemon };\r\n    }\r\n  | {\r\n      type: 'FETCHING_DESCRIPTION_FAIL';\r\n    };\r\n\r\nconst descriptionReducer = (state: IState, action: Actions) => {\r\n  switch (action.type) {\r\n    case ActionTypes.FETCHING_DESCRIPTION_START:\r\n      return { ...state, isLoading: true };\r\n    case ActionTypes.FETCHING_DESCRIPTION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        pokemonDetails: {\r\n          ...action.payload.pokemon,\r\n          description: action.payload.description,\r\n        },\r\n      };\r\n    case ActionTypes.FETCHING_DESCRIPTION_FAIL:\r\n      return { ...state, isLoading: false, error: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default descriptionReducer;\r\n","import { IPaginationState, ActionTypes, Actions } from './reducerTypes';\r\nimport {\r\n  generatePagesNumbers,\r\n  getEntriesOnSelectedPage,\r\n} from '../helpers/helpers';\r\n\r\nconst FIRST_PAGE_IDX: number = 1;\r\n\r\ninterface IInitialState {\r\n  entriesOnSelectedPage: Array<any>;\r\n  elementsOnPage: number;\r\n  actualPageIdx: number;\r\n  lastPageIdx: number;\r\n  isBusy: boolean;\r\n  pagesNumbers: number[];\r\n}\r\n// export const initialState: IPaginationState<IUser>\r\nexport const initialState: IInitialState = {\r\n  entriesOnSelectedPage: [],\r\n  elementsOnPage: 20,\r\n  actualPageIdx: FIRST_PAGE_IDX,\r\n  lastPageIdx: FIRST_PAGE_IDX,\r\n  pagesNumbers: [],\r\n  isBusy: false,\r\n};\r\n\r\n// export const paginationReducer = (\r\n//   state: IPaginationState<IUser>,\r\n//   action: Actions<IUser>\r\n// React.Reducer<State, Action>\r\n\r\nexport const paginationReducer = <T,>(\r\n  state: IPaginationState<T>,\r\n  action: Actions<T>\r\n) => {\r\n  // const reducer: React.Reducer<IPaginationState<T>, Actions<T>> = (\r\n  //   state,\r\n  //   action\r\n  // ) => {\r\n  switch (action.type) {\r\n    case ActionTypes.UPDATE_DATA_ENTIRES_ON_PAGE:\r\n      return updateDataEntriesOnPage(state, action);\r\n    case ActionTypes.UPDATE_ACTUAL_PAGE_INDEX:\r\n      return updateActualPageIndex(state, action);\r\n    case ActionTypes.SET_TO_LOADING:\r\n      return setToLoading(state, action);\r\n    case ActionTypes.SET_TO_LOADING_DONE:\r\n      return setToLoadingDone(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n  // };\r\n\r\n  // return reducer(_state, _action);\r\n};\r\n\r\nconst setToLoading = <T,>(state: IPaginationState<T>, action: Actions<T>) => ({\r\n  ...state,\r\n  isBusy: true,\r\n});\r\nconst setToLoadingDone = <T,>(\r\n  state: IPaginationState<T>,\r\n  action: Actions<T>\r\n) => ({\r\n  ...state,\r\n  isBusy: false,\r\n});\r\n\r\nconst updateDataEntriesOnPage = <T,>(\r\n  state: IPaginationState<T>,\r\n  action: Actions<T>\r\n) => {\r\n  if (action.type === 'UPDATE_DATA_ENTIRES_ON_PAGE') {\r\n    const { actualPageIdx } = state;\r\n    const { elementsOnPage, dataEntries } = action.payload;\r\n    const lastPageIdx: number = Math.ceil(dataEntries.length / elementsOnPage);\r\n    const pagesNumbers: number[] = generatePagesNumbers(lastPageIdx);\r\n    const entriesOnSelectedPage = getEntriesOnSelectedPage(\r\n      actualPageIdx,\r\n      elementsOnPage,\r\n      lastPageIdx,\r\n      dataEntries\r\n    );\r\n    return {\r\n      ...state,\r\n      entriesOnSelectedPage,\r\n      elementsOnPage,\r\n      lastPageIdx,\r\n      pagesNumbers,\r\n    };\r\n  }\r\n  return state;\r\n};\r\n\r\nconst updateActualPageIndex = <T,>(\r\n  state: IPaginationState<T>,\r\n  action: Actions<T>\r\n) => {\r\n  if (action.type === 'UPDATE_ACTUAL_PAGE_INDEX') {\r\n    switch (action.payload.updateType) {\r\n      case 'first':\r\n        return { ...state, actualPageIdx: FIRST_PAGE_IDX };\r\n      case 'last':\r\n        return { ...state, actualPageIdx: state.lastPageIdx };\r\n      case 'number':\r\n        if (action.payload.pageNumber) {\r\n          return { ...state, actualPageIdx: action.payload.pageNumber };\r\n        } else {\r\n          return state;\r\n        }\r\n      case 'next':\r\n        const actualPageIdx: number =\r\n          state.actualPageIdx === state.lastPageIdx\r\n            ? state.lastPageIdx\r\n            : state.actualPageIdx + 1;\r\n        return { ...state, actualPageIdx };\r\n      case 'prev':\r\n        const actualPageIdxPrev: number =\r\n          state.actualPageIdx === FIRST_PAGE_IDX\r\n            ? state.actualPageIdx\r\n            : state.actualPageIdx - 1;\r\n        return { ...state, actualPageIdx: actualPageIdxPrev };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  return state;\r\n};\r\n","import { ActionTypes, Actions } from '../reducer/reducerTypes';\r\n\r\nconst actionsFactory = <T>(dispatch: React.Dispatch<Actions<T>>) => ({\r\n  updateDataEntries: (dataEntries: T[], elementsOnPage: number) =>\r\n    dispatch({\r\n      type: 'UPDATE_DATA_ENTIRES_ON_PAGE',\r\n      payload: {\r\n        dataEntries,\r\n        elementsOnPage,\r\n      },\r\n    }),\r\n  setToIsLoading: () => dispatch({ type: ActionTypes.SET_TO_LOADING }),\r\n  setToLoadingDone: () => dispatch({ type: ActionTypes.SET_TO_LOADING_DONE }),\r\n  goToFirstPage: () =>\r\n    dispatch({\r\n      type: ActionTypes.UPDATE_ACTUAL_PAGE_INDEX,\r\n      payload: {\r\n        updateType: 'first',\r\n      },\r\n    }),\r\n  goToLastPage: () =>\r\n    dispatch({\r\n      type: ActionTypes.UPDATE_ACTUAL_PAGE_INDEX,\r\n      payload: {\r\n        updateType: 'last',\r\n      },\r\n    }),\r\n  goToPage: (pageNumber: number) =>\r\n    dispatch({\r\n      type: ActionTypes.UPDATE_ACTUAL_PAGE_INDEX,\r\n      payload: {\r\n        updateType: 'number',\r\n        pageNumber,\r\n      },\r\n    }),\r\n  goToNextPage: () =>\r\n    dispatch({\r\n      type: ActionTypes.UPDATE_ACTUAL_PAGE_INDEX,\r\n      payload: {\r\n        updateType: 'next',\r\n      },\r\n    }),\r\n  goToPreviousPage: () =>\r\n    dispatch({\r\n      type: ActionTypes.UPDATE_ACTUAL_PAGE_INDEX,\r\n      payload: {\r\n        updateType: 'prev',\r\n      },\r\n    }),\r\n});\r\n\r\nexport default actionsFactory;\r\n","import { useEffect, useReducer } from 'react';\r\nimport {\r\n  IPaginationStateValues,\r\n  IPaginationActions,\r\n  paginationTuple,\r\n} from '../paginationTypes';\r\nimport { initialState, paginationReducer } from '../reducer/paginationReducer';\r\nimport actionsFactory from './actionsFactory';\r\nimport { IPaginationState, Actions } from '../reducer/reducerTypes';\r\nimport React from 'react';\r\n\r\nconst usePagination = <T,>(dataEntries: T[], elementsOnPage: number = 20) => {\r\n  const [paginationState, dispatch] = useReducer<\r\n    React.Reducer<IPaginationState<T>, Actions<T>>\r\n  >(paginationReducer, initialState);\r\n  const actions = actionsFactory(dispatch);\r\n  const {\r\n    actualPageIdx,\r\n    lastPageIdx,\r\n    entriesOnSelectedPage,\r\n    pagesNumbers,\r\n    isBusy,\r\n  } = paginationState;\r\n\r\n  useEffect(() => {\r\n    actions.updateDataEntries(dataEntries, elementsOnPage);\r\n  }, [dataEntries, elementsOnPage, actualPageIdx]);\r\n\r\n  useEffect(() => {\r\n    actions.setToIsLoading();\r\n    let timer = setTimeout(() => actions.setToLoadingDone(), 333);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [actualPageIdx]);\r\n\r\n  const paginationStateValues: IPaginationStateValues<T> = {\r\n    actualPageIdx,\r\n    lastPageIdx,\r\n    entriesOnSelectedPage,\r\n    isBusy,\r\n    pagesNumbers,\r\n  };\r\n\r\n  const paginationActions: IPaginationActions = {\r\n    goToFirstPage: actions.goToFirstPage,\r\n    goToPreviousPage: actions.goToPreviousPage,\r\n    goToPage: actions.goToPage,\r\n    goToNextPage: actions.goToNextPage,\r\n    goToLastPage: actions.goToLastPage,\r\n  };\r\n\r\n  return [paginationStateValues, paginationActions] as paginationTuple<T>;\r\n};\r\n\r\nexport default usePagination;\r\n","import React, { useMemo } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faWeightHanging,\r\n  faSortAmountUp,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport classes from './PokemonCard.module.scss';\r\n\r\nimport { TYPE_COLORS } from '../../../constans/constans';\r\n\r\ninterface IProps {\r\n  pokemon: IPokemon;\r\n}\r\n\r\nconst generateBgDependingOnType = (pokemon: IPokemon) => {\r\n  const bgColorTypes: string[] = [];\r\n  pokemon.types.forEach((pokemonType, index) => {\r\n    if (index === 0) {\r\n      bgColorTypes.push(TYPE_COLORS[pokemonType]);\r\n      bgColorTypes.push(TYPE_COLORS[pokemonType]);\r\n    } else {\r\n      bgColorTypes.splice(1, 1, TYPE_COLORS[pokemonType]);\r\n    }\r\n  });\r\n  return {\r\n    background: `linear-gradient(45deg, ${bgColorTypes[0]} 50%, ${bgColorTypes[1]} 50%`,\r\n  };\r\n};\r\n\r\nconst handleMouseMoveOverImage = (\r\n  event: React.MouseEvent<HTMLImageElement, MouseEvent>,\r\n  pokemonSprite: string\r\n) => {\r\n  const target = event.target as HTMLImageElement;\r\n  return (target.src =\r\n    pokemonSprite || 'https://img.icons8.com/bubbles/100/000000/no-image.png');\r\n};\r\n\r\nconst drawTypes = (types: string[]) => {\r\n  return types\r\n    .map(\r\n      pokemonType => pokemonType.charAt(0).toUpperCase() + pokemonType.slice(1)\r\n    )\r\n    .join('/');\r\n};\r\n\r\nconst drawId = (id: number) => {\r\n  if (id < 10) {\r\n    return '#00' + id;\r\n  }\r\n  if (id >= 10 && id < 100) {\r\n    return '#0' + id;\r\n  }\r\n  return '#' + id;\r\n};\r\n\r\nconst PokemonCard: React.FC<IProps> = ({ pokemon }) => {\r\n  const location = useLocation();\r\n  const { id, name, height, weight, types, sprites } = pokemon;\r\n  const cardBg = useMemo(() => generateBgDependingOnType(pokemon), [pokemon]);\r\n  const pokemonTypes = useMemo(() => drawTypes(types), [types]);\r\n  const pokemonId = useMemo(() => drawId(id), [id]);\r\n\r\n  return (\r\n    <Link\r\n      to={{\r\n        pathname: `/${name}`,\r\n        search: `?id=${id}`,\r\n        state: { background: location },\r\n      }}\r\n      style={{ textDecoration: 'none' }}\r\n    >\r\n      <div className={classes.PokemonCard} style={cardBg}>\r\n        <img\r\n          onMouseOver={e => handleMouseMoveOverImage(e, sprites.back_default)}\r\n          onMouseOut={e => handleMouseMoveOverImage(e, sprites.front_default)}\r\n          src={\r\n            sprites.front_default ||\r\n            'https://img.icons8.com/bubbles/100/000000/no-image.png'\r\n          }\r\n          alt='pokemon-icons'\r\n        />\r\n        <h1 className={classes.PokemonName}>{name}</h1>\r\n        <p className={classes.PokemonId}>{pokemonId}</p>\r\n        <div className={classes.Info}>\r\n          <div className={classes.DetailInfo}>\r\n            <i>\r\n              <FontAwesomeIcon icon={faWeightHanging} size='2x' />\r\n            </i>\r\n            <span className={classes.WeightHeight}>{weight}</span>\r\n          </div>\r\n          <div className={classes.DetailInfo}>\r\n            <i>\r\n              <FontAwesomeIcon icon={faSortAmountUp} size='2x' />\r\n            </i>\r\n            <span className={classes.WeightHeight}>{height}</span>\r\n          </div>\r\n        </div>\r\n        <div className={classes.Details}>DETAILS</div>\r\n        <p className={classes.Type}>Type: {pokemonTypes}</p>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default PokemonCard;\r\n","import React from 'react';\r\nimport PaginationPanel from '../Pagination/PaginationPanel/PaginationPanel';\r\nimport usePagination from '../Pagination/usePagination/usePagination';\r\nimport PokemonCard from '../PokemonCard/PokemonCard';\r\nimport classes from '../Pokedex.module.scss';\r\nimport { useEffect } from 'react';\r\n\r\ninterface IProps {\r\n  pokemonsToDisplay: IPokemon[];\r\n  types: AvailavlePokemonTypes[];\r\n}\r\nconst Pokemons: React.FC<IProps> = ({ pokemonsToDisplay, types }) => {\r\n  const [paginationState, paginationActions] = usePagination(\r\n    pokemonsToDisplay,\r\n    20\r\n  );\r\n  useEffect(() => {\r\n    paginationActions.goToFirstPage();\r\n  }, [types]);\r\n  return (\r\n    <>\r\n      <div className={classes.Container}>\r\n        {paginationState.entriesOnSelectedPage\r\n          .slice(0, 20)\r\n          .map((pokemon, idx) => (\r\n            <PokemonCard pokemon={pokemon} key={pokemon.name + idx} />\r\n          ))}\r\n      </div>\r\n      <div>\r\n        <PaginationPanel\r\n          paginationState={paginationState}\r\n          paginationActions={paginationActions}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokemons;\r\n","import { useEffect, useContext, useReducer } from 'react';\r\nimport classes from './Pokedex.module.scss';\r\n\r\nimport { pokedexCtx } from '../../store/pokemons/context/pokemonsContextProvider';\r\n\r\nimport Spinner from '../UI/Spinner/Spinner';\r\nimport Filter from './Filter/Filter';\r\nimport useTypeChanger from '../../customHooks/useTypeChanger';\r\nimport filterReducer, {\r\n  Actions,\r\n  ActionTypes,\r\n  initialState,\r\n} from '../../reducers/filterReducer';\r\nimport Pokemons from './Pokemons/Pokemons';\r\n\r\nconst actionsFactory = (dispatch: React.Dispatch<Actions>) => ({\r\n  filterPokemons: (pokemons: IPokemon[], types: AvailavlePokemonTypes[]) =>\r\n    dispatch({\r\n      type: ActionTypes.FILTER_POKEMONS,\r\n      payload: {\r\n        pokemons,\r\n        types,\r\n      },\r\n    }),\r\n});\r\n\r\nconst Pokedex = () => {\r\n  const { pokedexState } = useContext(pokedexCtx);\r\n  const { pokemons } = pokedexState;\r\n  const { types, handleTypeChange, resetTypes } = useTypeChanger();\r\n\r\n  const [state, dispatch] = useReducer(filterReducer, initialState);\r\n  const actions = actionsFactory(dispatch);\r\n\r\n  useEffect(() => {\r\n    if (pokemons)\r\n      dispatch({\r\n        type: ActionTypes.SET_POKEMONS_TO_DISPLAY,\r\n        payload: {\r\n          pokemons: pokemons,\r\n        },\r\n      });\r\n  }, [pokemons]);\r\n\r\n  useEffect(() => {\r\n    actions.filterPokemons(pokemons, types);\r\n  }, [types, pokemons]);\r\n\r\n  return (\r\n    <div className={classes.Wrapper}>\r\n      <Filter\r\n        types={types}\r\n        handleTypeChange={handleTypeChange}\r\n        resetTypes={resetTypes}\r\n      />\r\n      {!pokedexState.isLoading ? (\r\n        <Pokemons pokemonsToDisplay={state.pokemonsToDisplay} types={types} />\r\n      ) : (\r\n        <div className={classes.SpinnerContainer}>\r\n          <p className={classes.LoadingText}>\r\n            Pateince young padawan... Data is loading... :)\r\n          </p>\r\n          <Spinner />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pokedex;\r\n","import React from 'react';\r\n\r\nconst Purpose = () => {\r\n  return <div>PURPOSE SECTION - WORK IN PROGRESS...</div>;\r\n};\r\n\r\nexport default Purpose;\r\n","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport classes from './RouteModal.module.scss';\r\n\r\nconst RouteModal: React.FC<React.ReactNode> = ({ children }) => {\r\n  const history = useHistory();\r\n\r\n  const closeModal = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n    e.stopPropagation();\r\n    history.goBack();\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.body.style.overflow = 'hidden';\r\n\r\n    return () => {\r\n      document.body.style.overflow = 'visible';\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.Wrapper} onClick={closeModal}>\r\n      {/* <span className={classes.Close} onClick={closeModal}>\r\n        <svg\r\n          className={classes.CloseIcon}\r\n          fill='currentColor'\r\n          viewBox='0 0 20 20'\r\n          xmlns='http://www.w3.org/2000/svg'\r\n        >\r\n          <path\r\n            fill-rule='evenodd'\r\n            d='M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z'\r\n            clip-rule='evenodd'\r\n          />\r\n        </svg>\r\n      </span> */}\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouteModal;\r\n","import { createContext, useReducer } from 'react';\r\nimport descriptionReducer, {\r\n  IState,\r\n  initialState,\r\n} from '../reducer/descriptionReducer';\r\nimport { actionsFactory } from './actionsFactory';\r\n\r\nexport interface IContext {\r\n  state: IState;\r\n  fetchActions: {\r\n    fetchDescriptionStart: () => void;\r\n    fetchDescriptionSuccess: (description: string, pokemon: IPokemon) => void;\r\n    fetchDescriptionFail: () => void;\r\n  };\r\n}\r\n\r\nconst initCtx: IContext = {\r\n  state: initialState,\r\n  fetchActions: {\r\n    fetchDescriptionStart: () => {},\r\n    fetchDescriptionSuccess: () => {},\r\n    fetchDescriptionFail: () => {},\r\n  },\r\n};\r\n\r\nexport const descriptionCtx = createContext(initCtx);\r\n\r\nconst DescriptionContextProvider: React.FC<React.ReactNode> = ({\r\n  children,\r\n}) => {\r\n  const [state, dispatch] = useReducer(descriptionReducer, initialState);\r\n  const actions = actionsFactory(dispatch);\r\n  const {\r\n    fetchDescriptionStart,\r\n    fetchDescriptionSuccess,\r\n    fetchDescriptionFail,\r\n  } = actions;\r\n  const fetchActions = {\r\n    fetchDescriptionStart,\r\n    fetchDescriptionSuccess,\r\n    fetchDescriptionFail,\r\n  };\r\n  const providerValue = {\r\n    state,\r\n    fetchActions,\r\n  };\r\n  return (\r\n    <descriptionCtx.Provider value={providerValue}>\r\n      {children}\r\n    </descriptionCtx.Provider>\r\n  );\r\n};\r\n\r\nexport default DescriptionContextProvider;\r\n","import { Actions, ActionTypes } from '../reducer/descriptionReducer';\r\n\r\nexport const actionsFactory = (dispatch: React.Dispatch<Actions>) => ({\r\n  fetchDescriptionStart: () =>\r\n    dispatch({ type: ActionTypes.FETCHING_DESCRIPTION_START }),\r\n  fetchDescriptionSuccess: (description: string, pokemon: IPokemon) =>\r\n    dispatch({\r\n      type: ActionTypes.FETCHING_DESCRIPTION_SUCCESS,\r\n      payload: { description, pokemon },\r\n    }),\r\n  fetchDescriptionFail: () =>\r\n    dispatch({ type: ActionTypes.FETCHING_DESCRIPTION_FAIL }),\r\n});\r\n","interface IWithLanguage {\r\n  language: { name: string };\r\n}\r\n\r\nconst getDescription = async (url: string, id: string) => {\r\n  const urlPath = url + `/${id}`;\r\n  const response = await fetch(urlPath);\r\n  const data = await response.json();\r\n  const description = data.flavor_text_entries.find(\r\n    <T extends IWithLanguage>(text: T) => text.language.name === 'en'\r\n  );\r\n  const convertedDescription = description.flavor_text.replace(/\\u21b5/g, '');\r\n  return convertedDescription;\r\n};\r\n\r\nexport default getDescription;\r\n","import classes from './Skill.module.scss';\r\n\r\ninterface IProps {\r\n  statName: string;\r\n  statValue: number;\r\n}\r\nconst Skill: React.FC<IProps> = ({ statName, statValue }) => {\r\n  return (\r\n    <>\r\n      <p className={classes.StatName}>\r\n        {statName} <span className={classes.StatValue}>{statValue}</span>\r\n      </p>\r\n      <div className={classes.OutsideSkillBar}>\r\n        <div\r\n          className={classes.InsideSkillBar}\r\n          style={{ width: `${(statValue / 255) * 100}%` }}\r\n        ></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Skill;\r\n","import { useContext, useEffect, useMemo } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\nimport {\r\n  URL_POKEMON_DESCRIPTION,\r\n  TYPE_COLORS,\r\n} from '../../../constans/constans';\r\nimport { descriptionCtx } from '../../../store/description/context/descriptionContextProvider';\r\nimport getDescription from '../../../store/description/context/getDescription';\r\nimport { pokedexCtx } from '../../../store/pokemons/context/pokemonsContextProvider';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport classes from './PokemonDetails.module.scss';\r\n\r\nimport Skill from './Skill/Skill';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst drawId = (id: number) => {\r\n  if (id < 10) {\r\n    return '#00' + id;\r\n  }\r\n  if (id >= 10 && id < 100) {\r\n    return '#0' + id;\r\n  }\r\n  return '#' + id;\r\n};\r\n\r\nconst generatePokemonSpanTypes = (types: AvailavlePokemonTypes[]) =>\r\n  types.map((type, index) => {\r\n    let spanStyle = {\r\n      color: `${TYPE_COLORS[type]}`,\r\n      border: `3px solid ${TYPE_COLORS[type]}`,\r\n    };\r\n    return (\r\n      <span key={type + index} style={spanStyle} className={classes.SpanType}>\r\n        {type.charAt(0).toUpperCase() + type.slice(1)}\r\n      </span>\r\n    );\r\n  });\r\n\r\nconst generateSkills = (stats: IStats[]) =>\r\n  stats.map(stat => (\r\n    <Skill\r\n      statValue={stat.statValue}\r\n      statName={stat.statName}\r\n      key={stat.statValue + stat.statName}\r\n    />\r\n  ));\r\n\r\nconst findPokemonById = (id: string, pokemons: IPokemon[]) =>\r\n  pokemons.find(pokemon => pokemon.id === parseInt(id));\r\n\r\ninterface IProps {\r\n  id_url: string | null;\r\n}\r\n\r\nconst PokemonDetails: React.FC<IProps> = ({ id_url }) => {\r\n  const history = useHistory();\r\n  const { state, fetchActions } = useContext(descriptionCtx);\r\n  const { pokedexState } = useContext(pokedexCtx);\r\n  // const { nameFromUrl } = useParams<{ [key: string]: string }>();\r\n  const {\r\n    id,\r\n    name,\r\n    height,\r\n    weight,\r\n    types,\r\n    stats,\r\n    description,\r\n  } = state.pokemonDetails;\r\n\r\n  const spanTypes = useMemo(() => generatePokemonSpanTypes(types), [types]);\r\n  const id_format = useMemo(() => drawId(id), [id]);\r\n  const skillsList = useMemo(() => generateSkills(stats), [stats]);\r\n\r\n  useEffect(() => {\r\n    if (!id_url) {\r\n      fetchActions.fetchDescriptionFail();\r\n    } else {\r\n      const pokemon = findPokemonById(id_url, pokedexState.pokemons);\r\n      const fetchDescription = async (pokemon: IPokemon) => {\r\n        fetchActions.fetchDescriptionStart();\r\n        try {\r\n          const description = await getDescription(\r\n            URL_POKEMON_DESCRIPTION,\r\n            id_url\r\n          );\r\n          fetchActions.fetchDescriptionSuccess(description, pokemon);\r\n        } catch (err) {\r\n          fetchActions.fetchDescriptionFail();\r\n        }\r\n      };\r\n      if (pokemon) fetchDescription(pokemon);\r\n    }\r\n  }, [id_url]);\r\n\r\n  useEffect(() => {\r\n    if (state.error) console.log('Error while fetching - display alert');\r\n  }, [state.error]);\r\n\r\n  const closeModal = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n    e.stopPropagation();\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.Wrapper} onClick={e => e.stopPropagation()}>\r\n      <div className={classes.DetailsCard}>\r\n        {state.isLoading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <>\r\n            <i className={classes.closeIcon} onClick={e => closeModal(e)}>\r\n              <FontAwesomeIcon icon={faTimes} size='2x' />\r\n            </i>\r\n            <img src={state.pokemonDetails.sprites.front_default} alt='' />\r\n            <h1 className={classes.PokemonName}>{name}</h1>\r\n            <p className={classes.PokemonId}>{id_format}</p>\r\n            <p className={classes.PokemonDescription}>{description}</p>\r\n            <div className={classes.PokemonInfoContainer}>\r\n              <p className={classes.PokemonWeight}>Weight: {weight}</p>\r\n              <p>Height: {height}</p>\r\n            </div>\r\n            <div className={classes.PokemonInfoContainer}>{spanTypes}</div>\r\n            <div className={classes.SkillsContainer}>{skillsList}</div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonDetails;\r\n","import { Route, Switch, useLocation } from 'react-router-dom';\r\nimport { Location } from 'history';\r\nimport BestPokemons from '../BestPokemons/BestPokemons';\r\nimport Contact from '../Contact/Contact';\r\nimport Pokedex from '../Pokedex/Pokedex';\r\nimport Purpose from '../Purpose/Purpose';\r\nimport RouteModal from '../UI/RouteModal/RouteModal';\r\nimport PokemonDetails from '../Pokedex/PokemonDetails/PokemonDetails';\r\nimport { useQuery } from '../../customHooks/useQuery';\r\n\r\ninterface ILocationState {\r\n  pathname: string;\r\n  state: { background: Location };\r\n}\r\n\r\nconst Routes = () => {\r\n  const location: ILocationState = useLocation();\r\n  const background = location.state && location.state.background;\r\n  const id = useQuery('id', location);\r\n  return (\r\n    <>\r\n      <Switch location={background || location}>\r\n        <Route path='/contact' component={Contact} />\r\n        <Route path='/projectPurpose' component={Purpose} />\r\n        <Route path='/mybest' component={BestPokemons} />\r\n        <Route exact path='/' component={Pokedex} />\r\n      </Switch>\r\n      {background && (\r\n        <Route\r\n          path='/:name'\r\n          children={\r\n            <RouteModal>\r\n              <PokemonDetails id_url={id} />\r\n            </RouteModal>\r\n          }\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","export const useQuery = (key: string, location: any) => {\r\n  const query = new URLSearchParams(location.search);\r\n  return query.get(`${key}`);\r\n};\r\n","interface IWithUrl {\r\n  url: string;\r\n}\r\n\r\nconst getPokemons = async (url: string) => {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  const pokemons: IPokemon[] = await Promise.all(\r\n    data.results.map(async <T extends IWithUrl>(result: T) => {\r\n      const response = await fetch(result.url);\r\n      const data = await response.json();\r\n      const { id, name, height, weight, types, sprites, stats } = data;\r\n      const { front_default, back_default } = sprites;\r\n      const spritesImages = {\r\n        front_default,\r\n        back_default,\r\n      };\r\n      const pokemonTypes = types.map((type: any) => type.type.name);\r\n      const pokemonStats = stats.map((singleStat: any) => {\r\n        return {\r\n          statName: singleStat.stat.name,\r\n          statValue: singleStat.base_stat,\r\n        };\r\n      });\r\n      return {\r\n        id,\r\n        name,\r\n        height,\r\n        weight,\r\n        sprites: spritesImages,\r\n        types: pokemonTypes,\r\n        stats: pokemonStats,\r\n      };\r\n    })\r\n  );\r\n  return pokemons;\r\n};\r\n\r\nexport default getPokemons;\r\n","import React, { useContext, useEffect } from 'react';\nimport Layout from './components/Layout/Layout';\nimport Routes from './components/Routes/Routes';\nimport { URL_ALL_POKEMONS } from './constans/constans';\nimport getPokemons from './store/pokemons/context/getPokemons';\nimport { pokedexCtx } from './store/pokemons/context/pokemonsContextProvider';\n\nconst App = () => {\n  const { fetchActions } = useContext(pokedexCtx);\n\n  useEffect(() => {\n    const fetchPokemons = async () => {\n      fetchActions.fetchPokemonsStart();\n      try {\n        const pokemons = await getPokemons(URL_ALL_POKEMONS);\n        fetchActions.fetchPokemonsSuccess(pokemons);\n      } catch (err) {\n        fetchActions.fetchPokemonsFail();\n      }\n    };\n    fetchPokemons();\n  }, []);\n  return (\n    <Layout>\n      <Routes />\n    </Layout>\n  );\n};\n\nexport default App;\n","import React, { createContext, ReactNode, useState, useEffect } from 'react';\r\n\r\ninterface IVieportSizeContexProps {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport const viewportSizeContext = createContext({\r\n  width: window.innerWidth,\r\n  height: window.innerHeight,\r\n} as IVieportSizeContexProps);\r\n\r\n// const getWidth = () => window.innerWidth\r\n//   || document.documentElement.clientWidth\r\n//   || document.body.clientWidth;\r\n\r\nconst ViewportSizeContextProvider: React.FC<ReactNode> = ({ children }) => {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n  const handleWindowResize = () => {\r\n    setWindowSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', handleWindowResize);\r\n    window.addEventListener('onorientationchange', handleWindowResize);\r\n    return () => {\r\n      window.removeEventListener('resize', handleWindowResize);\r\n      window.removeEventListener('onorientationchange', handleWindowResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <viewportSizeContext.Provider value={windowSize}>\r\n      {children}\r\n    </viewportSizeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ViewportSizeContextProvider;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'normalize.css';\nimport './index.css';\nimport PokemonsContextProvider from './store/pokemons/context/pokemonsContextProvider';\nimport ViewportSizeContextProvider from './contexts/ViewportSizeContextProvider';\nimport DescriptionContextProvider from './store/description/context/descriptionContextProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <ViewportSizeContextProvider>\n        <PokemonsContextProvider>\n          <DescriptionContextProvider>\n            <App />\n          </DescriptionContextProvider>\n        </PokemonsContextProvider>\n      </ViewportSizeContextProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}